// Generated by CoffeeScript 1.9.3
(function() {
  'use strict';
  var IPIP, dnsMock, expect, ipip, rewire;

  expect = require('chai').expect;

  rewire = require('rewire');

  ipip = rewire('../lib/ipip.js');

  IPIP = ipip.IPIP;

  dnsMock = {
    resolve4: function(domain, callback) {
      if (domain === 'this.domain.does.not.exist') {
        return callback(new Error('queryA ENOTFOUND'));
      } else {
        return callback(null, ['8.8.8.8']);
      }
    }
  };

  describe('IPIP', function() {
    var ip;
    ip = new IPIP;
    (function() {
      var info;
      info = ip.info();
      if (Object.keys(info).length === 0) {
        return it.skip('skip due to missing database');
      } else {
        return it('should return version', function(done) {
          info.to.have.a.property('version');
          return done();
        });
      }
    })();
    it('should handle malformed input', function(done) {
      expect(function() {
        return ip.ip('202.x.x.x');
      }).to["throw"](Error);
      expect(function() {
        return ip.ip('256.1.1.1');
      }).to["throw"](Error);
      expect(function() {
        return ip.ip('8.8.4.4', 'invalid-format');
      }).to["throw"](Error);
      expect(function() {
        return ip.domain('8.8.4.4', 0);
      }).to["throw"](Error);
      expect(function() {
        return ip.domain.apply(ip, new Array(4));
      }).to["throw"](Error);
      return done();
    });
    it('shoudl accept numeric input', function() {
      return expect(ip.ip(0x040404)).to.have.a.property('city');
    });
    it('should return a dictionary', function(done) {
      expect(ip.ip('202.195.161.30', 'dict')).to.have.a.property('city');
      return done();
    });
    it('should fetch IP information for a domain', function(done) {
      ipip.__set__('dns', dnsMock);
      return ip.domain('baidu.com', 'array').then(function(result) {
        expect(result).to.be.an.aray;
        return ip.domain('ujs.edu.cn').then(function(result) {
          expect(result).ok;
          return ip.domain('this.domain.does.not.exist', function(err, result) {
            expect(err).ok;
            return done();
          });
        });
      });
    });
    return it('should return an array', function(done) {
      expect(ip.ip('8.8.8.8')).to.be.an.aray;
      return ip.domain('qq.com', 'array', function(err, result) {
        expect(result).to.be.an('array');
        return done();
      });
    });
  });

  describe('Custom options', function() {
    return it('should be able to load data from custom location', function(done) {
      var ip, path;
      expect(function() {
        return new IPIP('/tmp/non-exist-file.dat');
      }).to["throw"](Error);
      expect(function() {
        return new IPIP('package.json');
      }).to["throw"](Error);
      path = require('path').join(__dirname, '..', '17monipdb.dat');
      ip = new IPIP;
      expect(ip.ip('8.8.8.8', 'dict')).to.have.a.property('city');
      return done();
    });
  });

}).call(this);

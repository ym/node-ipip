// Generated by CoffeeScript 1.9.3
(function() {
  var BLOCK_SIZE, Dat, HEADER_SIZE, IP_MASK, LEN_OFFSET, PARTITION_FACTOR;

  HEADER_SIZE = 0x400;

  IP_MASK = 0xFF000000;

  BLOCK_SIZE = 8;

  PARTITION_FACTOR = 22;

  LEN_OFFSET = 7;


  /**
   * Driver for dat format provided by ipip.net
   * @param {Buffer} buffer file content
   */

  Dat = function(buffer) {
    this.buffer = buffer;
    this.len = buffer.readInt32BE(0);
  };


  /**
   * lookup an ip
   * @param  {Integer} ip IPv4 address in int
   * @return {Array}    lookup result
   */

  Dat.prototype.lookup = function(ip) {
    var a, b, ceil, floor, high, index, low, mid, offset, partition, recordLength, recordOffset;
    partition = ip & IP_MASK;
    partition = partition >>> PARTITION_FACTOR;
    floor = this.buffer.readInt32LE(partition + 4) * BLOCK_SIZE + HEADER_SIZE;
    ceil = this.len - HEADER_SIZE - 4;
    low = 0;
    high = Math.floor((ceil - floor) / BLOCK_SIZE);
    mid = void 0;
    while (low <= high) {
      mid = low + high >>> 1;
      offset = floor + mid * BLOCK_SIZE + 4;
      a = this.buffer.readInt32BE(offset) >>> 0;
      b = this.buffer.readInt32BE(offset + BLOCK_SIZE) >>> 0;
      if (b < ip) {
        low = mid + 1;
      } else if (a > ip) {
        high = mid - 1;
      } else {
        offset += BLOCK_SIZE;
        index = this.buffer.readInt32LE(offset + 4) >>> 0;
        recordOffset = (index & 0x00FFFFFF) + this.len - HEADER_SIZE;
        recordLength = this.buffer.readUInt8(offset + LEN_OFFSET);
        return this.buffer.slice(recordOffset, recordOffset + recordLength).toString().split('\t');
      }
    }
    return null;
  };


  /**
   * record columns
   * @type {Array}
   */

  Dat.prototype.columns = ['country', 'province', 'city', 'organization', 'carieer'];

  module.exports = Dat;

}).call(this);
